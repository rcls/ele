
ee00:
6e 01 1f # mov     #$01,$1f ; disable cop.
6e 00 ea # mov #0,$ea ;Clear parity

# Start reading from the sensor.
6e 02 00 # mov #%00000010,0 ; cs high.
6e 1a 04 # mov #%00011010,4 ; strobe, clk, cs are out.
3f 00    # clr 0 ; take cs low.

# Dump one bit.
4f       # clra
ad 40    # jsr read_data
# Get a byte.
a6 fe    # lda #%11111110
ad 3c    # jsr read_data

# Convert to decimal
ae ff    # ldx #-1

5c       # incx
a0 64    # sub 100
24 fb    # bcc .-5
bf eb    # stx $eb

ae 0a    # ldx #10

5a       # decx
ab 0a    # add 10
24 fb    # bcc .-5
bf ec    # stx $eb

b7 ed    # sta $ed

# Get the next 5 bits.
a6 f0    # lda #$f0
ad 24    # jsr read_data

b7 ee    # sta $ee
48       # lsla
48       # lsla
bb ee    # add $ee
62       # nsa
a4 0f    # and #$0f
b7 ee    # sta $ee

# display.
cd ef 1a # jsr display

# pulse strobe & update parity.
6e 12 00 # mov #$12,0
33 ea    # com ea
6e 02 00 # mov #$02,0

6e 20 ef # mov #5,$ef
4f       # clra
5f       # clrx
5b fe    # dbnzx .-2
4b fc    # dbnzx .-4
3b ef f9 # dbnz $ef,.-7

20 b5    # bra $83

ee51=

# read_data:
6e 10 00 # mov #%00010000,0
6e 18 00 # mov #%00011000,0

0b 00 00 # brclr5 0,.+0
49       # rola
25 f4    # bcs .-12
81       # rts

# Segment defs.
eee0: 7e 48 3d 6d 4b 67 77 4c 7f 6f

# display_byte:
ef00:

89       # pshx

ae 08    # ldx #8
b8 ea    # xor $ea

48       # lsla
25 08    # bcs .+8

6e 02 00 # mov #2,0
6e 0a 00 # mov #$a,0

20 06    # bcs .+6

6e 22 00 # mov #22,0
6e 2a 00 # mov #$2a,0

5b ed    # dbnz .-19

88       # pulx
81       # rts

# display.
ef1a=
6e 0a 00 # mov #%00001010,0 ; clk and cs high.
6e 3a 04 # mov #%00111010,4 ; data, strobe, clk, cs are out.

ae 04    # ldx #4
#display_loop
89       # pshx
ee ea    # ldx x,$ea
d6 ee e0 # lda x,$eee0
cd ef 00 # jsr display_byte
88       # pulx
5b f4    # dbnzx display_loop
81       # rts
